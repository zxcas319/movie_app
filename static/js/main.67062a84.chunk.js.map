{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenres","_ref2","genres","react_default","a","createElement","className","MoviePoster","_ref3","poster","src","alt","Movie","_ref","title","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+BA,SAASA,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,GAiBxC,SAASK,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAAQE,IAAI,iBAQfC,MArDf,SAAAC,GAA8C,IAA9BC,EAA8BD,EAA9BC,MAAML,EAAwBI,EAAxBJ,OAAOP,EAAiBW,EAAjBX,OAAOa,EAAUF,EAAVE,SAChC,OACQZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEfH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQE,IAAKG,KAEtCX,EAAAC,EAAAC,cAAA,cAAMS,EAAN,KACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVJ,EAAOc,IAAI,SAACd,EAAOe,GAAR,OAAkBd,EAAAC,EAAAC,cAACL,EAAD,CAAaE,OAAQA,EAAQgB,IAAKD,OAEpEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACQgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,eC8BbC,6MA5CbC,MAAM,KAKNC,cAAe,WAYb,OAXaC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GACjC,OACA3B,EAAAC,EAAAC,cAAC0B,EAAD,CACAjB,MAAOgB,EAAME,cACbvB,OAAQqB,EAAMG,mBACdf,IAAKY,EAAMI,GACXhC,OAAQ4B,EAAM5B,OACda,SAAUe,EAAMf,gBAOnBoB,gCAAY,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,EAAAU,WAOZJ,SAAS,WACR,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAM,OAAEA,EAAOC,SACpBF,KAAK,SAAAE,GAAI,OAAEA,EAAKC,KAAKtB,SACrBuB,MAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,yFA5BxBP,KAAKX,8CA+BE,IACCN,EAAWiB,KAAKpB,MAAhBG,OACR,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAWuB,EAAS,MAAQ,gBAC9BA,EAASiB,KAAKnB,gBAAkB,kBAxCvB6B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.67062a84.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n\r\n\r\nfunction Movie({title,poster,genres,synopsis}){\r\n    return(\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie_Columns\">\r\n\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <h1> {title} </h1>\r\n            <div className=\"Movie_Genres\">\r\n                {genres.map((genres,index) => <MovieGenres genres={genres} key={index}/>)}\r\n            </div>\r\n            <div className=\"Movie_synopsis\">\r\n            <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />  \r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nfunction MovieGenres({genres}){\r\n    return(\r\n        <span className=\"Movie_Genres\">{genres}</span>\r\n    )\r\n    \r\n}\r\n\r\nMovie.propTypes={\r\n    title:propTypes.string.isRequired,\r\n    poster:propTypes.string.isRequired,\r\n    genres:propTypes.array.isRequired,\r\n    synopsis: propTypes.string.isRequired\r\n\r\n}\r\n\r\nMovieGenres.propTypes={\r\n    genres: propTypes.string.isRequired\r\n}\r\n\r\nfunction MoviePoster({poster}){\r\n    return (\r\n        <img src={poster} alt=\"Movie Poster\"/>\r\n    )\r\n}\r\n\r\nMoviePoster.propTypes={\r\n    poster:propTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\n\n\n\nclass App extends Component {\n \n  state={}\n\n  componentDidMount(){\n    this._getMovies(); \n  }\n  _renderMovies= ()=>{\n    const movies=this.state.movies.map(movie => {\n      return (\n      <Movie \n      title={movie.title_english}\n      poster={movie.medium_cover_image}\n      key={movie.id}\n      genres={movie.genres} \n      synopsis={movie.synopsis}\n      /> \n      );\n    })\n    return movies;\n  };\n  \n   _getMovies= async()=>{\n    const movies = await this._callApi();// 이작업이 끝나야 밑에가 실행\n    this.setState({\n      movies\n    });\n   };\n\n   _callApi=()=>{\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(potato=>potato.json())\n    .then(json=>json.data.movies)//=> 리턴의 뜻이 내재\n    .catch(err=>console.log(err))\n   };\n  \n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}